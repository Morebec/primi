<?php

namespace Smuuf\Primi;

use hafriedlander\Peg\Parser;

class CompiledParser extends Parser\Packrat {

/*!* Primi

StringLiteral: /("(.|\n)*?"|'(.|\n)*?')/
NumberLiteral: /-?\d+(\.\d+)?/
BoolLiteral: "true" | "false"
RegexLiteral: "/" /([^\\\/]|\\\/)+/ "/"

Literal: skip:NumberLiteral | skip:StringLiteral | skip:BoolLiteral | skip:RegexLiteral
VariableCore: /([a-zA-Z_][a-zA-Z0-9_]*)/
Variable: ( ( core:VariableCore post:UnaryOperator? ) | ( pre:UnaryOperator? core:VariableCore ) ) ( "[" > dereference:Value > "]" )*

ArrayItem: ( key:Expression > ":" )? > value:Expression )
ArrayStructure: "[" > ( > items:ArrayItem ( > "," > items:ArrayItem )* )? > "]"

Value: skip:Literal | skip:Variable | skip:ArrayStructure

AddOperator: "+" | "-"
MultiplyOperator: "*" | "/"
AssignmentOperator: "=" | "+=" | "-=" | "*=" | "/="
ComparisonOperator: "==" | "!=" | ">=" | "<=" | ">" | "<"
UnaryOperator: "++" | "--"

Expression: skip:Assignment | skip:Comparison | skip:Addition
Comparison: left:Addition > op:ComparisonOperator > right:Addition
Assignment: left:Variable > op:AssignmentOperator > right:Expression
Addition: operands:Multiplication ( > ops:AddOperator > operands:Multiplication)*
Multiplication: operands:Operand ( > ops:MultiplyOperator > operands:Operand)*
Operand: ( "(" > skip:Expression > ")" ) | skip:FunctionCall | skip:Value

FunctionCall: function:VariableCore > "(" > args:FunctionCallArgumentList? > ")"
FunctionCallArgumentList: skip:Operand ( > "," > skip:Operand )*

FunctionDeclarationArgumentList: skip:VariableCore ( > "," > skip:VariableCore )*
FunctionDeclaration: "function" [ function:VariableCore SPACE "(" > args:FunctionDeclarationArgumentList? > ")" SPACE body:Block
IfStatement: "if" SPACE "(" > left:Expression > ")" SPACE ( right:Block ) >
WhileStatement: "while" SPACE "(" > left:Expression > ")" SPACE ( right:Block ) >
ForeachStatement: "foreach" SPACE "(" > left:Expression SPACE "as" SPACE item:VariableCore SPACE ")" SPACE ( right:Block ) >
BlockStatements: skip:IfStatement | skip:WhileStatement | skip:ForeachStatement | skip:FunctionDeclaration
CommandStatements: skip:EchoStatement | skip:ReturnStatement
EchoStatement: "echo" [ subject:Expression
ReturnStatement: "return" ( [ subject:Expression )?

Statement: ( skip:BlockStatements SPACE ";"? ) | ( ( skip:CommandStatements | skip:Expression ) SPACE ";" )
Block: "{" > skip:Program > "}"

SPACE: /([\s\n]*)/
Program: > ( SPACE Statement SPACE )+ >

*/

}