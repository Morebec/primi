#!/usr/bin/env php
<?php

// Composer's autoload.
require __DIR__ . "/vendor/autoload.php";

set_error_handler(function($severity, $message, $file, $line) {
	throw new \ErrorException($message, 0, $severity, $file, $line);
}, E_ALL);

// Autoloader.
$loader = new \Smuuf\Koloader\Autoloader(__DIR__ . "/temp/");
$loader->addDirectory(__DIR__ . "/src")->register();

array_shift($argv);
if (empty($argv[0])) {
	die_with_help();
}

$config = parse_arguments($argv);

// Load source, create "VM" context and create the interpreter.

$context = new \Smuuf\Primi\Context;
$interpreter = new \Smuuf\Primi\Interpreter($context, __DIR__ . "/temp/");

// Get syntax tree.
if ($config['repl']) {
	echo header_string('REPL') . "\n";
	$repl = new \Smuuf\Primi\Repl($interpreter);
	$repl->start();
	die;
}

if ($config['input_is_code']) {
	$source = $config['input'];
} else {
	$filepath = $config['input'];
	if (!is_file($filepath)) {
		die("Input file '$filepath' not found.\n");
	}
	$source = file_get_contents($filepath);
}

try {

	// Get syntax tree.
	if ($config['tree']) {
		print_r($interpreter->getSyntaxTree($source));
		die;
	}

	// Run interpreter
	$interpreter->run($source);
	if ($config['print_context']) {
		print_r($context->getVariables());
		die;
	}

} catch (\Smuuf\Primi\ErrorException $e) {

	die($e->getMessage() . "\n");

}

function parse_arguments(array $args): array {

	$config = [
		'tree' => false,
		'print_context' => false,
		'input_is_code' => false,
		'input' => false,
		'repl' => false,
	];

	while ($a = array_shift($args)) {
		switch ($a) {
			case "-r":
			case "--repl":
				$config['repl'] = true;
			break;
			case "-t":
			case "--tree":
				$config['tree'] = true;
			break;
			case "-s":
			case "--source":
				$config['input_is_code'] = true;
			break;
			case "-c":
			case "--print-context":
				$config['print_context'] = true;
			break;
			default:
				$config['input'] = $a;
			break;
		}
	}

	return $config;

}

function die_with_help() {

	$header = header_string('CLI');
	$help = <<<HELP
$header
Usage: primi <options> <input>
Options:
  -r, --repl     Start REPL (read, eval, print, loop).
  -t, --tree     Only print syntax tree and exit.
  -s, --source   Treat <input> as string instead of a source file path.
  -c, --context  Print contents of primary context after execution.

HELP;

	die($help);

}

function header_string(string $env = null) {
	$env = $env ? "($env)" : null;
	return "Primi language {$env}, Copyright (c) Premysl Karbula";
}
